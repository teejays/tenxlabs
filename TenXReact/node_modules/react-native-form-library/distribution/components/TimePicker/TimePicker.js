'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = _reactNative.StyleSheet.create({
  pickerContainer: {
    flexDirection: 'row'
  },
  container: {
    flex: 1
  }
});

var TimePicker = function (_React$Component) {
  _inherits(TimePicker, _React$Component);

  function TimePicker(props) {
    _classCallCheck(this, TimePicker);

    var _this = _possibleConstructorReturn(this, (TimePicker.__proto__ || Object.getPrototypeOf(TimePicker)).call(this, props));

    _this.state = _this.initializeState();
    return _this;
  }

  /*
  * Default the state of the date picker.
  */


  _createClass(TimePicker, [{
    key: 'initializeState',
    value: function initializeState() {
      var date = new Date();
      var defaultValue = this.props.value ? this.props.value.split(":") : null;

      var hours = defaultValue ? this.convertTo12HourClock(parseInt(defaultValue[0])) : this.convertTo12HourClock(date.getHours());
      var minutes = defaultValue ? parseInt(defaultValue[1]) : date.getMinutes();
      var meridiem = defaultValue ? this.getMeridiem(parseInt(defaultValue[0])) : this.getMeridiem(date.getHours());

      this.props.onChange(this.props.name, this.convertTo24HourClock(hours, minutes, meridiem));

      return {
        hours: hours,
        minutes: minutes,
        meridiem: meridiem
      };
    }

    /*
     * Custom on blur function.
     */

  }, {
    key: 'onBlur',
    value: function onBlur() {
      if (this.props.onBlur) this.props.onBlur();
    }

    /*
    * Render the hour picker.
    */

  }, {
    key: 'renderHourPicker',
    value: function renderHourPicker() {
      var _this2 = this;

      var hours = [];

      for (var i = 0; i < 12; i++) {
        hours.push(_react2.default.createElement(_reactNative.Picker.Item, { key: 'hour' + i, label: '' + (i + 1), value: i + 1 }));
      }

      return _react2.default.createElement(
        _reactNative.Picker,
        {
          style: this.props.style,
          selectedValue: this.state.hours,
          onValueChange: function onValueChange(value) {
            return _this2.onHourChange(value);
          }
        },
        hours
      );
    }

    /*
    * Render the minute picker
    */

  }, {
    key: 'renderMinutePicker',
    value: function renderMinutePicker() {
      var _this3 = this;

      var minutes = [];

      for (var i = 0; i < 60; i++) {
        var minute = i < 10 ? '0' + i : i;
        minutes.push(_react2.default.createElement(_reactNative.Picker.Item, { key: 'minute' + i, label: '' + minute, value: minute }));
      }

      return _react2.default.createElement(
        _reactNative.Picker,
        {
          style: this.props.style,
          selectedValue: this.state.minutes,
          onValueChange: function onValueChange(value) {
            return _this3.onMinuteChange(value);
          } },
        minutes
      );
    }
  }, {
    key: 'renderMeridiemPicker',
    value: function renderMeridiemPicker() {
      var _this4 = this;

      return _react2.default.createElement(
        _reactNative.Picker,
        {
          style: this.props.style,
          selectedValue: this.state.meridiem,
          onValueChange: function onValueChange(value) {
            return _this4.onMeridiemChange(value);
          }
        },
        _react2.default.createElement(_reactNative.Picker.Item, { label: "am", value: "am" }),
        _react2.default.createElement(_reactNative.Picker.Item, { label: "pm", value: "pm" })
      );
    }

    /*
    * Change the value of form component.
    *
    * @param [any] value. Set the value of the form component.
    */

  }, {
    key: 'onHourChange',
    value: function onHourChange(value) {
      var _state = this.state,
          minutes = _state.minutes,
          meridiem = _state.meridiem;

      this.setState({ hours: value });
      this.props.onChange(this.props.name, this.convertTo24HourClock(value, minutes, meridiem));
    }

    /*
    * Change the value of form component.
    *
    * @param [any] value. Set the value of the form component.
    */

  }, {
    key: 'onMinuteChange',
    value: function onMinuteChange(value) {
      var _state2 = this.state,
          hours = _state2.hours,
          meridiem = _state2.meridiem;

      this.setState({ minutes: value });
      this.props.onChange(this.props.name, this.convertTo24HourClock(hours, value, meridiem));
    }

    /*
    * Change the value of form component.
    *
    * @param [any] value. Set the value of the form component.
    */

  }, {
    key: 'onMeridiemChange',
    value: function onMeridiemChange(value) {
      var _state3 = this.state,
          hours = _state3.hours,
          minutes = _state3.minutes;

      this.setState({ meridiem: value });
      this.props.onChange(this.props.name, this.convertTo24HourClock(hours, minutes, value));
    }

    /*
    * Utility function for converting hour from 24 hours to 12 hours
    *
    * @param [int] hour. Hour between 1 and 23.
    * @return [int]. Hour between 1 and 12.
    */

  }, {
    key: 'convertTo12HourClock',
    value: function convertTo12HourClock(hour) {
      return hour % 12 == 0 ? 12 : hour % 12;
    }

    /*
    * Utility function for getting time of day.
    *
    * @param [int] hour. Hour between 1 and 23.
    * @return [string]. am or pm.
    */

  }, {
    key: 'getMeridiem',
    value: function getMeridiem(hour) {
      return hour >= 12 ? "pm" : "am";
    }

    /*
    * Utility function for converting time from 12 hour clock to 24 hour clock
    *
    * @param [int] hour. Hour between 1 and 23.
    * @param [int] minutes. Minutes between 0-59.
    * @param [int] meridiem. AM or PM.
    * @return [String]. e.g. 2:03 pm => 14:03
    */

  }, {
    key: 'convertTo24HourClock',
    value: function convertTo24HourClock(hour, minutes, meridiem) {
      var h = hour;

      if (meridiem.toLowerCase() == "am" && hour == 12) {
        h = 0;
      } else if (meridiem.toLowerCase() == "pm" && hour != 12) {
        h += 12;
      }

      return this.addZero(h) + ':' + this.addZero(minutes);
    }

    /*
    * Add a zero to the beginnig of an integer if its less than 10.
    *
    * @param [Number] i. Number to add zero to.
    * @return [String]. Formatted number.
    */

  }, {
    key: 'addZero',
    value: function addZero(i) {
      i = parseInt(i);
      if (i < 10) {
        i = "0" + i;
      }
      return i;
    }
  }, {
    key: 'render',
    value: function render() {
      var picker = this.props;
      // const maxDays = this.getDaysInMonth(this.state.month, this.state.year)
      // // If month changes and days in month are less than current value of day, reset day
      // if (this.state.day > maxDays) {
      //   this.onDayChange('day', 1)
      // }

      return _react2.default.createElement(
        _reactNative.View,
        { style: styles.pickerContainer },
        _react2.default.createElement(
          _reactNative.View,
          { style: styles.container },
          this.renderHourPicker()
        ),
        _react2.default.createElement(
          _reactNative.View,
          { style: styles.container },
          this.renderMinutePicker()
        ),
        _react2.default.createElement(
          _reactNative.View,
          { style: styles.container },
          this.renderMeridiemPicker()
        )
      );
    }
  }]);

  return TimePicker;
}(_react2.default.Component);

TimePicker.propTypes = {
  name: _propTypes2.default.string,
  onChange: _propTypes2.default.func,
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array, _propTypes2.default.number]),
  value: _propTypes2.default.string
};

exports.default = TimePicker;