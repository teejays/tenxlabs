"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Input$propTypes;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require("react-native");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = _reactNative.StyleSheet.create({
  labelText: {
    color: '#000',
    fontSize: 10,
    fontWeight: '900',
    marginBottom: 2
  },
  textInput: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    fontSize: 14
  }
});

var Input = function (_React$Component) {
  _inherits(Input, _React$Component);

  function Input(props) {
    _classCallCheck(this, Input);

    var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

    _this.state = {
      isFocused: false
    };
    return _this;
  }

  _createClass(Input, [{
    key: "onBlur",
    value: function onBlur(event) {
      if (this.props.onBlur) this.props.onBlur();
      this.setState({ isFocused: false });
    }
  }, {
    key: "onChange",
    value: function onChange(event) {
      this.props.onChange(this.props.name, event.nativeEvent.text);
    }
  }, {
    key: "onFocus",
    value: function onFocus(event) {
      if (this.props.onFocus) this.props.onFocus();
      this.setState({ isFocused: true });
    }
  }, {
    key: "render",
    value: function render() {
      var containerStyles = [];
      var labelStyles = [styles.labelText];
      var inputStyles = [styles.textInput];

      var _props = this.props,
          containerStyle = _props.containerStyle,
          labelStyle = _props.labelStyle,
          inputStyle = _props.inputStyle,
          containerActiveStyle = _props.containerActiveStyle,
          labelActiveStyle = _props.labelActiveStyle,
          inputActiveStyle = _props.inputActiveStyle,
          containerErrorStyle = _props.containerErrorStyle,
          labelErrorStyle = _props.labelErrorStyle,
          inputErrorStyle = _props.inputErrorStyle,
          label = _props.label;


      if (containerStyle) containerStyles.push(containerStyle);
      if (labelStyle) labelStyles.push(labelStyle);
      if (inputStyle) inputStyles.push(inputStyle);

      if (this.state.isFocused) {
        if (containerActiveStyle) containerStyles.push(containerActiveStyle);
        if (labelActiveStyle) labelStyles.push(labelActiveStyle);
        if (inputActiveStyle) inputStyles.push(inputActiveStyle);
      }

      if (this.props.error) {
        if (containerErrorStyle) containerStyles.push(containerErrorStyle);
        if (labelErrorStyle) labelStyles.push(labelErrorStyles);
        if (inputErrorStyle) inputStyles.push(inputErrorStyles);
      }

      var input = this.props;
      return _react2.default.createElement(
        _reactNative.View,
        { style: containerStyles },
        label ? _react2.default.createElement(
          _reactNative.Text,
          { style: labelStyles },
          label
        ) : null,
        _react2.default.createElement(_reactNative.TextInput, {
          autoCapitalize: input.autoCapitalize,
          autoCorrect: input.autoCorrect,
          autoFocus: input.autoFocus,
          blurOnSubmit: input.blurOnSubmit,
          caretHidden: input.caretHidden,
          defaultValue: input.defaultValue,
          editable: input.editable,
          keyboardType: input.keyboardType,
          maxHeight: input.maxHeight,
          maxLength: input.maxLength,
          multiline: input.multiline,
          numberOfLines: input.numberOfLines,
          onBlur: this.onBlur.bind(this),
          onChange: this.onChange.bind(this),
          onContentSizeChange: input.onContentSizeChange,
          onEndEditing: input.onEndEditing,
          onFocus: this.onFocus.bind(this),
          onScroll: input.onScroll,
          onSelectionChange: input.onSelectionChange,
          onSubmitEditing: input.onSubmitEditing,
          placeholder: input.placeholder,
          placeholderTextColor: input.placeholderTextColor,
          returnKeyType: input.returnKeyType,
          secureTextEntry: input.secureTextEntry,
          selectTextOnFocus: input.selectTextOnFocus,
          selection: input.selection,
          selectionColor: input.selectionColor,
          style: inputStyles,
          value: input.value
        })
      );
    }
  }]);

  return Input;
}(_react2.default.Component);

Input.propTypes = (_Input$propTypes = {
  autoCapitalize: _propTypes2.default.string,
  autoCorrect: _propTypes2.default.bool,
  autoFocus: _propTypes2.default.bool,
  blurOnSubmit: _propTypes2.default.func,
  caretHidden: _propTypes2.default.bool,
  containerStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array, _propTypes2.default.number]),
  containerActiveStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array, _propTypes2.default.number]),
  containerErrorStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array, _propTypes2.default.number]),
  defaultValue: _propTypes2.default.string,
  editable: _propTypes2.default.bool,
  error: _propTypes2.default.string,
  inputActiveStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array, _propTypes2.default.number])
}, _defineProperty(_Input$propTypes, "inputActiveStyle", _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array, _propTypes2.default.number])), _defineProperty(_Input$propTypes, "inputErrorStyle", _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array, _propTypes2.default.number])), _defineProperty(_Input$propTypes, "keyboardType", _propTypes2.default.string), _defineProperty(_Input$propTypes, "label", _propTypes2.default.string), _defineProperty(_Input$propTypes, "labelStyle", _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array, _propTypes2.default.number])), _defineProperty(_Input$propTypes, "labelActiveStyle", _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array, _propTypes2.default.number])), _defineProperty(_Input$propTypes, "labelErrorStyle", _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array, _propTypes2.default.number])), _defineProperty(_Input$propTypes, "maxHeight", _propTypes2.default.number), _defineProperty(_Input$propTypes, "maxLength", _propTypes2.default.number), _defineProperty(_Input$propTypes, "multiline", _propTypes2.default.bool), _defineProperty(_Input$propTypes, "name", _propTypes2.default.string), _defineProperty(_Input$propTypes, "onBlur", _propTypes2.default.func), _defineProperty(_Input$propTypes, "onChange", _propTypes2.default.func), _defineProperty(_Input$propTypes, "onContentSizeChange", _propTypes2.default.func), _defineProperty(_Input$propTypes, "onEndEditing", _propTypes2.default.func), _defineProperty(_Input$propTypes, "onFocus", _propTypes2.default.func), _defineProperty(_Input$propTypes, "onScroll", _propTypes2.default.func), _defineProperty(_Input$propTypes, "onSelectionChange", _propTypes2.default.func), _defineProperty(_Input$propTypes, "onSubmitEditing", _propTypes2.default.func), _defineProperty(_Input$propTypes, "placeholder", _propTypes2.default.string), _defineProperty(_Input$propTypes, "placeholderTextColor", _propTypes2.default.string), _defineProperty(_Input$propTypes, "returnKeyType", _propTypes2.default.string), _defineProperty(_Input$propTypes, "secureTextEntry", _propTypes2.default.bool), _defineProperty(_Input$propTypes, "selectTextOnFocus", _propTypes2.default.bool), _defineProperty(_Input$propTypes, "selection", _propTypes2.default.object), _defineProperty(_Input$propTypes, "selectionColor", _propTypes2.default.string), _defineProperty(_Input$propTypes, "value", _propTypes2.default.string), _Input$propTypes);

exports.default = Input;