'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var YearPicker = function (_React$Component) {
	_inherits(YearPicker, _React$Component);

	function YearPicker() {
		_classCallCheck(this, YearPicker);

		return _possibleConstructorReturn(this, (YearPicker.__proto__ || Object.getPrototypeOf(YearPicker)).apply(this, arguments));
	}

	_createClass(YearPicker, [{
		key: 'componentWillMount',

		/*
  * if intial value is set, set the form value on mount
  */
		value: function componentWillMount() {
			if (this.props.initialValue) {
				this.props.onChange(this.props.name, this.props.initialValue);
			}
		}
		/*
   * Custom on blur function.
   */

	}, {
		key: 'onBlur',
		value: function onBlur() {
			if (this.props.onBlur) this.props.onBlur();
		}

		/*
  * Change the value of form component.
  *
  * @param [any] value. Set the value of the form component.
  */

	}, {
		key: 'onChange',
		value: function onChange(value) {
			this.props.onChange(this.props.name, value);
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			var picker = this.props;

			var years = [];
			for (var i = picker.minYear || 1900; i < (picker.maxYear || 2200); i++) {
				years.push(_react2.default.createElement(_reactNative.Picker.Item, { key: 'year' + i, label: '' + i, value: i }));
			}

			return _react2.default.createElement(
				_reactNative.Picker,
				{
					style: picker.style,
					selectedValue: picker.value || picker.initialValue,
					onValueChange: function onValueChange(value) {
						return _this2.onChange(value);
					}
				},
				years
			);
		}
	}]);

	return YearPicker;
}(_react2.default.Component);

YearPicker.propTypes = {
	intitialValue: _propTypes2.default.number,
	maxYear: _propTypes2.default.number,
	minYear: _propTypes2.default.number,
	name: _propTypes2.default.string,
	onChange: _propTypes2.default.func,
	style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array, _propTypes2.default.number]),
	value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
};

exports.default = YearPicker;