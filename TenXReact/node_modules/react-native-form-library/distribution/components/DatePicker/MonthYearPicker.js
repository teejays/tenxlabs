'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

var _MonthPicker = require('./MonthPicker');

var _MonthPicker2 = _interopRequireDefault(_MonthPicker);

var _YearPicker = require('./YearPicker');

var _YearPicker2 = _interopRequireDefault(_YearPicker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = _reactNative.StyleSheet.create({
  pickerContainer: {
    flexDirection: 'row'
  },
  container: {
    flex: 1
  }
});

var MonthYearPicker = function (_React$Component) {
  _inherits(MonthYearPicker, _React$Component);

  function MonthYearPicker(props) {
    _classCallCheck(this, MonthYearPicker);

    var _this = _possibleConstructorReturn(this, (MonthYearPicker.__proto__ || Object.getPrototypeOf(MonthYearPicker)).call(this, props));

    _this.state = _this.initializeState();
    return _this;
  }

  /*
  * Initialize the state for the month year picker.
  */


  _createClass(MonthYearPicker, [{
    key: 'initializeState',
    value: function initializeState() {
      var date = new Date();
      var defaultValue = this.props.value ? this.props.value.split("-") : null;

      var year = date.getFullYear();
      var month = date.getMonth() + 1;

      if (defaultValue) {
        year = defaultValue ? parseInt(defaultValue[0]) : year, month = defaultValue && defaultValue[1] ? parseInt(defaultValue[1]) : month;
      }

      this.props.onChange(this.props.name, year + '-' + month);

      return { year: year, month: month };
    }
    /*
     * Custom on blur function.
     */

  }, {
    key: 'onBlur',
    value: function onBlur() {
      if (this.props.onBlur) this.props.onBlur();
    }

    /*
    * Change the state of the month.
    *
    * @param [String] name. Name passed from the month picker.
    * @param [any] value. Value of the month.
    */

  }, {
    key: 'onMonthChange',
    value: function onMonthChange(name, value) {
      this.setState({ month: value });
      this.props.onChange(this.props.name, this.state.year + '-' + value);
    }

    /*
    * Change the state of the year.
    *
    * @param [String] name. Name passed from the year picker.
    * @param [any] value. Value of the year.
    */

  }, {
    key: 'onYearChange',
    value: function onYearChange(name, value) {
      this.setState({ year: value });
      this.props.onChange(this.props.name, value + '-' + this.state.month);
    }
  }, {
    key: 'render',
    value: function render() {
      var picker = this.props;
      return _react2.default.createElement(
        _reactNative.View,
        { style: styles.pickerContainer },
        _react2.default.createElement(
          _reactNative.View,
          { style: styles.container },
          _react2.default.createElement(_MonthPicker2.default, {
            style: picker.style,
            name: 'month',
            onChange: this.onMonthChange.bind(this),
            value: this.state.month
          })
        ),
        _react2.default.createElement(
          _reactNative.View,
          { style: styles.container },
          _react2.default.createElement(_YearPicker2.default, {
            style: picker.style,
            name: 'year',
            maxYear: picker.maxYear,
            minYear: picker.minYear,
            onChange: this.onYearChange.bind(this),
            value: this.state.year
          })
        )
      );
    }
  }]);

  return MonthYearPicker;
}(_react2.default.Component);

MonthYearPicker.propTypes = {
  maxYear: _propTypes2.default.number,
  minYear: _propTypes2.default.number,
  name: _propTypes2.default.string,
  onChange: _propTypes2.default.func,
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array, _propTypes2.default.number]),
  value: _propTypes2.default.string
};

exports.default = MonthYearPicker;