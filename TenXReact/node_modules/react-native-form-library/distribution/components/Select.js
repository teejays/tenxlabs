'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Select = function (_React$Component) {
	_inherits(Select, _React$Component);

	function Select() {
		_classCallCheck(this, Select);

		return _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).apply(this, arguments));
	}

	_createClass(Select, [{
		key: 'onBlur',

		/*
   * Custom on blur function.
   */
		value: function onBlur() {
			if (this.props.onBlur) this.props.onBlur();
		}

		/*
   * Change the value of form component.
   *
   * @param [any] value. Set the value of the form component.
   */

	}, {
		key: 'onChange',
		value: function onChange(value) {
			this.props.onChange(this.props.name, value);
		}

		/*
   * Render the picker options user gets to choose from.
   */

	}, {
		key: 'renderPickerOptions',
		value: function renderPickerOptions() {
			return this.props.options.map(function (option, index) {
				return _react2.default.createElement(_reactNative.Picker.Item, { key: 'option' + (index + 1), label: option.name, value: option.value || option.id || option.name });
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			var select = this.props;
			return _react2.default.createElement(
				_reactNative.Picker,
				{
					style: select.style,
					selectedValue: select.value,
					onValueChange: function onValueChange(value) {
						return _this2.onChange(value);
					}
				},
				_react2.default.createElement(_reactNative.Picker.Item, { key: 'option0', label: select.placeholder || 'Select...', value: "" }),
				this.renderPickerOptions()
			);
		}
	}]);

	return Select;
}(_react2.default.Component);

Select.propTypes = {
	name: _propTypes2.default.string,
	onBlur: _propTypes2.default.func,
	onChange: _propTypes2.default.func,
	options: _propTypes2.default.array,
	style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array, _propTypes2.default.number]),
	value: _propTypes2.default.any
};

exports.default = Select;