'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = Form;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
* Function to provide Component with form fields a form field update method.
*
* @param [Component] Component. Component with form fields.
* @param [String] formDataProp. Your form object name in your component.
* @return [Component] FormWrapper. Wrapper component to provide update property to form fields.
*/

function Form(Component, formDataProp) {
	return function (_React$Component) {
		_inherits(FormWrapper, _React$Component);

		function FormWrapper() {
			_classCallCheck(this, FormWrapper);

			return _possibleConstructorReturn(this, (FormWrapper.__proto__ || Object.getPrototypeOf(FormWrapper)).apply(this, arguments));
		}

		_createClass(FormWrapper, [{
			key: 'onUpdateProperty',

			/*
     * Method for updating the value of a form field.
     *
     * @param [String] key. Key of the form field of the form object to by updated.
     * Allow dot notation for field
     * @param [Any] value. New value of the form field.
     */
			value: function onUpdateProperty(key, value) {
				var form = _extends({}, this.component.state[formDataProp]);
				form = this.traverseNested(form, key);
				var cmd = 'form.' + key + '=value';
				var setter = new Function('form', 'key', 'value', cmd);
				setter(form, key, value, cmd);
				var newState = {};
				newState[formDataProp] = form;
				this.component.setState(newState);
			}

			/*
   * Traverse the obj tree annd ensure nested objects exists
   *
   * @param [Object] obj. Object to set key
   * @ param [String] key. Key of the object. Can be nested.
   */

		}, {
			key: 'traverseNested',
			value: function traverseNested(obj, key) {
				var keys = key.split('.');
				if (!obj[keys[0]] && keys.length > 1) obj[keys[0]] = {};
				if (keys.length <= 2) {
					return obj;
				} else {
					var nextKey = keys[0];
					keys.shift();
					var newObj = obj;
					newObj[nextKey] = this.traverseNested(obj[nextKey], keys.join('.'));
					return newObj;
				}
			}
		}, {
			key: 'render',
			value: function render() {
				var _this2 = this;

				return _react2.default.createElement(Component, _extends({
					ref: function ref(component) {
						_this2.component = component;
					}
				}, this.props, {
					updateProperty: this.onUpdateProperty.bind(this)
				}));
			}
		}]);

		return FormWrapper;
	}(_react2.default.Component);
}