'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = ValidateForm;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
* Function to provide Component with form validation
*
* @param [Component] Component. Component with form fields.
* @return [Component] FormWrapper. Wrapper component to provide form validation to form fields.
*/
function ValidateForm(Component) {
  return function (_React$Component) {
    _inherits(ValidateForm, _React$Component);

    function ValidateForm(props) {
      _classCallCheck(this, ValidateForm);

      var _this = _possibleConstructorReturn(this, (ValidateForm.__proto__ || Object.getPrototypeOf(ValidateForm)).call(this, props));

      _this.state = { formErrors: {} };
      return _this;
    }

    /*
    * Method to reinitialize form validation
    */


    _createClass(ValidateForm, [{
      key: 'resetValidation',
      value: function resetValidation() {
        this.setState({ formErrors: {} });
      }

      /*
      * Loop over form data and validate each value.
      * @param [Object] form. The form object.
      * @param [Object] requiredFields. The required fields to be validated.
      */

    }, {
      key: 'validateForm',
      value: function validateForm(form, requiredFields) {
        var _this2 = this;

        var errors = {};
        Object.keys(requiredFields).forEach(function (key, index) {
          var type = requiredFields[key].type;
          var value = key.split('.').reduce(function (o, i) {
            return o[i];
          }, form); // allow dot notation
          var message = '';
          var valid = true;

          if (requiredFields[key].validate) {
            valid = requiredFields[key].validate(value);
            message = requiredFields[key].message || 'Required *';
          } else {

            // switch input type
            switch (type) {
              case 'required':
                {
                  valid = _this2.validateRequired(value);
                  message = requiredFields[key].message || 'Required *';
                  break;
                }
              case 'email':
                {
                  valid = _this2.validateEmail(value);
                  message = requiredFields[key].message || 'Invalid email format.';
                  break;
                }
              case 'password':
                {
                  valid = _this2.validatePassword(value);
                  message = requiredFields[key].message || 'Password must be atleast 8 characters.';
                  break;
                }
              case 'passwordConfirmation':
                {
                  var n = key.lastIndexOf('.');
                  var passwordKey = n > 0 ? key.substring(0, n) + '.password' : 'password';
                  var password = passwordKey.split('.').reduce(function (o, i) {
                    return o[i];
                  }, form);
                  valid = _this2.validatePasswordConfirmation(password, value);
                  message = requiredFields[key].message || 'Password and password confirmation must match.';
                  break;
                }
              case 'phone':
                {
                  valid = _this2.validatePhone(value);
                  message = requiredFields[key].message || 'Number must be a valid 10 digit phone number.';
                  break;
                }
              case 'array':
                {
                  valid = _this2.validateArray(value);
                  message = requiredFields[key].message || 'Required *';
                  break;
                }
              default:
                break;
            }
          }

          // allow dot notation
          if (!valid) {
            errors = _this2.traverseNested(errors, key);
            var cmd = 'errors.' + key + '=message';
            var setter = new Function('errors', 'key', 'message', cmd);
            setter(errors, key, message, cmd);
          }
        });

        if (Object.keys(errors).length > 0) {
          this.setState({ formErrors: errors });
          return false;
        }
        return true;
      }

      /*
      * Traverse the obj tree annd ensure nested objects exists
      *
      * @param [Object] obj. Object to set key
      * @ param [String] key. Key of the object. Can be nested.
      */

    }, {
      key: 'traverseNested',
      value: function traverseNested(obj, key) {
        var keys = key.split('.');
        if (!obj[keys[0]] && keys.length > 1) obj[keys[0]] = {};
        if (keys.length <= 2) {
          return obj;
        } else {
          var nextKey = keys[0];
          keys.shift();
          var newObj = obj;
          newObj[nextKey] = this.traverseNested(obj[nextKey], keys.join('.'));
          return newObj;
        }
      }

      /*
      * Validate the phone number is a proper 10 digit phone number.
      *
      * @param [Any] value. Value to be validated.
      * @param [Boolean]. Boolean value indicated whether the form input is valid.
      */

    }, {
      key: 'validateRequired',
      value: function validateRequired(value) {
        return !!(value && value != null);
      }

      /*
      * Validate the phone number is a proper 10 digit phone number.
      *
      * @param [String] value. Value to be validated.
      * @param [Boolean]. Boolean value indicated whether the form input is valid.
      */

    }, {
      key: 'validateEmail',
      value: function validateEmail(value) {
        var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return value && re.test(value);
      }

      /*
      * Validate the phone number is a proper 10 digit phone number.
      *
      * @param [String] value. Value to be validated.
      * @param [Boolean]. Boolean value indicated whether the form input is valid.
      */

    }, {
      key: 'validatePassword',
      value: function validatePassword(value) {
        return value && value.length >= 8;
      }

      /*
      * Validate the password confirmation matches password.
      *
      * @param [String] password. Value to be validated.
      * @param [Boolean]. passwordConfirmation. Value to be validated.
      */

    }, {
      key: 'validatePasswordConfirmation',
      value: function validatePasswordConfirmation(password, passwordConfirmation) {
        return password === passwordConfirmation;
      }

      /*
      * Validate the phone number is a proper 10 digit phone number.
      *
      * @param [String] value. Value to be validated.
      * @param [Boolean]. Boolean value indicated whether the form input is valid.
      */

    }, {
      key: 'validatePhone',
      value: function validatePhone(value) {
        var re = /^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;
        return value && re.test(value);
      }

      /*
      * Validate the array value is greater than 0.
      *
      * @param [Array] value. Value to be validated.
      * @param [Boolean]. Boolean value indicated whether the form input is valid.
      */

    }, {
      key: 'validateArray',
      value: function validateArray(value) {
        if (value && value.length > 0) {
          if (_typeof(value[0]) === 'object' && !Array.isArray(value[0]) && value[0] !== null) {
            return Object.keys(value[0]).length > 0;
          } else {
            return value && value.length > 0;
          }
        } else return false;
      }
    }, {
      key: 'render',
      value: function render() {
        return _react2.default.createElement(Component, _extends({}, this.props, {
          formErrors: this.state.formErrors,
          validateForm: this.validateForm.bind(this),
          resetValidation: this.resetValidation.bind(this)
        }));
      }
    }]);

    return ValidateForm;
  }(_react2.default.Component);
}